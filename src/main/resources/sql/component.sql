-- Reset DB
DROP DATABASE IF EXISTS platform;
CREATE DATABASE platform;

-- Users
CREATE USER keycloak WITH PASSWORD 'qwerty';
CREATE USER platform WITH PASSWORD 'qwerty';

\connect platform

-- Schemas & grants
CREATE SCHEMA keycloak;
GRANT ALL ON SCHEMA public TO keycloak;
GRANT ALL ON SCHEMA keycloak TO keycloak;

CREATE SCHEMA platform;
GRANT ALL ON SCHEMA public TO platform;
GRANT ALL ON SCHEMA platform TO platform;
GRANT ALL ON SCHEMA platform TO keycloak;

SET search_path TO platform;

-- Extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users table
CREATE TABLE users
(
    id             INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    uuid           UUID UNIQUE NOT NULL DEFAULT uuid_generate_v4(),
    username       VARCHAR(255) UNIQUE NOT NULL,
    email          VARCHAR(255) UNIQUE,
    first_name     VARCHAR(255),
    last_name      VARCHAR(255),
    password_hash  VARCHAR(255)        NOT NULL,
    email_verified BOOLEAN          DEFAULT FALSE,
    enabled        BOOLEAN          DEFAULT TRUE
);

CREATE INDEX idx_users_username ON users (username);
CREATE INDEX idx_users_email ON users (email);

-- User attributes
CREATE TABLE user_attributes
(
    id      UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id INTEGER       NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    name    VARCHAR(255)  NOT NULL,
    value   VARCHAR(255),
    UNIQUE (user_id, name)
);

CREATE INDEX idx_user_attributes_user_id ON user_attributes (user_id);
CREATE INDEX idx_user_attributes_name ON user_attributes (name);
CREATE INDEX idx_user_attributes_value ON user_attributes (value);

GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE platform.users TO keycloak;
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE platform.user_attributes TO keycloak;

-- Seed users
INSERT INTO users(username, email, first_name, last_name, password_hash)
VALUES ('admin', 'admin@example.com', 'Admin', 'Account',
        '$2a$10$F.RKkkj5BaSipxxpAQnx2.dogjoEsBNvgSLAwvcgkvQcUYThxke52');
INSERT INTO users(username, email, first_name, last_name, password_hash)
VALUES ('user', 'user@example.com', 'User', 'Account',
        '$2a$10$GScPuSmLxLwwdOCmar1abOCXr9xSogz/1/ABBKRXy8YMAnS6cUqr2');

-- Enums
CREATE TYPE component_type_enum AS ENUM ('TABLE','FIELD','PAGE','ELEMENT');
CREATE TYPE component_status_enum AS ENUM ('ACTIVE','LOCKED','INACTIVE');
CREATE TYPE table_type_enum     AS ENUM ('STANDARD','USERS','ACCESS');
CREATE TYPE label_type_enum     AS ENUM ('LABEL','PLURAL_LABEL','DESCRIPTION','INSTRUCTION','POPUP');

-- Components (NLS LABELS AS JSONB HERE)
CREATE TABLE components
(
    id             UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    component_type component_type_enum NOT NULL,
    status         component_status_enum NOT NULL,
    created_at     TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at     TIMESTAMP WITHOUT TIME ZONE,
    created_by     INTEGER REFERENCES users (id),
    updated_by     INTEGER REFERENCES users (id),
    -- NLS labels stored as JSONB:
    -- {
    --   "en": { "LABEL":"User", "PLURAL_LABEL":"Users", "DESCRIPTION":"...", ... },
    --   "fr": { "LABEL":"Utilisateur", ... }
    -- }
    nls_labels     JSONB NOT NULL DEFAULT '{}'::jsonb,

    -- Basic sanity check: must be a JSON object
    CONSTRAINT components_nls_labels_is_object CHECK (jsonb_typeof(nls_labels) = 'object')
);

-- Helpful index for querying JSONB by language/label type
CREATE INDEX idx_components_nls_labels_gin ON components USING GIN (nls_labels jsonb_path_ops);

-- Component history
CREATE TYPE component_history_status_enum AS ENUM ('IN_PROGRESS','COMPLETED','FAILED');

CREATE TABLE component_history
(
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    component_id  UUID                           NOT NULL REFERENCES components (id) ON DELETE CASCADE,
    parent_id     BIGINT                               REFERENCES component_history (id) ON DELETE SET NULL,
    status        component_history_status_enum   NOT NULL,
    user_id       INTEGER                         NOT NULL REFERENCES users (id),
    timestamp     TIMESTAMP WITHOUT TIME ZONE     NOT NULL DEFAULT NOW(),
    ddl_statement TEXT,
    old_state     JSONB,
    new_state     JSONB
);

-- Tables
CREATE TABLE tables
(
    id            UUID PRIMARY KEY,
    type          table_type_enum NOT NULL,
    logical_name  TEXT    NOT NULL,
    removable     BOOLEAN NOT NULL,
    CONSTRAINT fk_tables_components
        FOREIGN KEY (id) REFERENCES components (id) ON DELETE CASCADE,
    CONSTRAINT l_name UNIQUE (logical_name)
);

-- Fields
CREATE TABLE fields
(
    id             UUID PRIMARY KEY,
    table_id       UUID    NOT NULL,
    name           TEXT    NOT NULL,
    data_type      INT     NOT NULL,
    removable      BOOLEAN NOT NULL,
    primary_key    BOOLEAN NOT NULL,
    auto_generated BOOLEAN NOT NULL,
    default_value  JSONB,
    properties     JSONB,
    CONSTRAINT fk_fields_components
        FOREIGN KEY (id) REFERENCES components (id) ON DELETE CASCADE,
    CONSTRAINT fk_fields_tables
        FOREIGN KEY (table_id) REFERENCES tables (id) ON DELETE CASCADE
);

-- GUI pages
CREATE TABLE gui_pages
(
    id        UUID PRIMARY KEY,
    page_name TEXT NOT NULL,
    page_url  TEXT,
    CONSTRAINT fk_pages_components
        FOREIGN KEY (id) REFERENCES components (id) ON DELETE CASCADE
);

-- GUI elements
CREATE TABLE gui_elements
(
    id               UUID PRIMARY KEY,
    page_id          UUID NOT NULL,
    element_name     TEXT NOT NULL,
    element_selector TEXT,
    CONSTRAINT fk_elements_components
        FOREIGN KEY (id) REFERENCES components (id) ON DELETE CASCADE,
    CONSTRAINT fk_elements_pages
        FOREIGN KEY (page_id) REFERENCES gui_pages (id) ON DELETE CASCADE
);

-- (Optional) Languages reference (kept in case you need to manage available locales centrally)
CREATE TABLE languages
(
    language_code CHAR(5) PRIMARY KEY, -- e.g., 'en', 'fr', 'zh-CN'
    language_name VARCHAR(100) NOT NULL
);

INSERT INTO languages (language_code, language_name) VALUES
                                                         ('en','English'),
                                                         ('fr','French'),
                                                         ('es','Spanish'),
                                                         ('zh-CN','Simplified Chinese'),
                                                         ('ar','Arabic'),
                                                         ('de','German');

-- Grants
GRANT ALL PRIVILEGES ON ALL TABLES    IN SCHEMA public   TO platform;
GRANT ALL PRIVILEGES ON ALL TABLES    IN SCHEMA platform TO platform;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA platform TO platform;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA platform TO keycloak;