package org.p2proto.service;

import liquibase.exception.DatabaseException;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.p2proto.ddl.CreateTableCommand;
import org.p2proto.ddl.DDLExecutor;
import org.p2proto.ddl.Domain;
import org.p2proto.dto.ColumnMetaData;
import org.p2proto.dto.CurrentUser;
import org.p2proto.dto.TableMetadata;
import org.p2proto.model.component.Component;
import org.p2proto.model.component.ComponentHistory;
import org.p2proto.repository.table.TableRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.sql.SQLException;
import java.util.*;
import java.util.stream.Collectors;

@Service
@Getter
@Slf4j
public class TableService {

    private final JdbcTemplate jdbcTemplate;
    private final DDLExecutor ddlExecutor;
    private final ComponentService componentService;
    private final TableRepository tableRepository;

    @Autowired
    public TableService(ComponentService componentService,
                        JdbcTemplate jdbcTemplate,
                        TableRepository tableRepository,
                        DDLExecutor ddlExecutor) {
        this.componentService = componentService;
        this.jdbcTemplate = jdbcTemplate;
        this.ddlExecutor = ddlExecutor;
        this.tableRepository = tableRepository;
    }

    @Transactional(propagation = Propagation.SUPPORTS)
    public void createTable(String tableName, String tableLabel, String tablePluralLabel, CurrentUser currentUser) {
        createTableInternal(new CreateTableCommand(tableName, tableLabel, tablePluralLabel), currentUser);
    }

    @Transactional(propagation = Propagation.SUPPORTS)
    public void createTable(TableMetadata tableMetadata, CurrentUser currentUser) {
        createTableInternal(new CreateTableCommand(tableMetadata), currentUser);
    }

    private void createTableInternal(CreateTableCommand command, CurrentUser currentUser) {
        Component component = null;
        Long historyId = null;
        try {
            // TODO validation of table and field names
            TableMetadata tableMetadata = command.getTable();
            // create component and history entry for table early so they are commited before DDL starts
            component = componentService.createComponent(Component.ComponentTypeEnum.TABLE, Component.ComponentStatusEnum.LOCKED, currentUser.getId());
            tableMetadata.setId(component.getId());
            historyId = componentService.createHistory(component.getId(), ComponentHistory.ComponentHistoryStatus.IN_PROGRESS, currentUser.getId());

            List<String> ddl = ddlExecutor.executeDDL(command);

            // after successful DDL, create remaining component and history entries for fields as successful
            for (ColumnMetaData columnMetadata : tableMetadata.getColumns()) {
                Component columnComponent = componentService.createComponent(Component.ComponentTypeEnum.FIELD, Component.ComponentStatusEnum.ACTIVE, currentUser.getId());
                columnMetadata.setId(columnComponent.getId());
                componentService.createHistory(columnComponent.getId(), ComponentHistory.ComponentHistoryStatus.COMPLETED, currentUser.getId());
            }
            // create table metadata
            tableRepository.createMetadataInDb(tableMetadata);
            // finalize component and history
            componentService.markSuccess(component.getId(), historyId, ddl);
        } catch (DatabaseException | SQLException e) {
            // in case of DDL failure, mark table component as inactive and history entry as failed. No entries for columns
            if (component != null ) {
                componentService.markFailure(component.getId(), historyId);
            }
        }
    }

    /**
     * Returns a default list of columns for a new table:
     * 1) "id" as a primary auto-increment key
     * 2) "created_at" timestamp
     * 3) "updated_at" timestamp
     */
    public static List<ColumnMetaData> defaultColumns() {
        // “autoGenerated = true” or rely on Domain.AUTOINCREMENT.isAutoIncrement().
        ColumnMetaData idCol = new ColumnMetaData(
                null,
                "id",
                "ID",
                Domain.AUTOINCREMENT,
                true,
                true,
                Map.of()
        );

        ColumnMetaData createdAtCol = new ColumnMetaData(
                "created_at",
                "Created At",
                Domain.DATETIME,
                Map.of()
        );

        ColumnMetaData updatedAtCol = new ColumnMetaData(
                "updated_at",
                "Updated At",
                Domain.DATETIME,
                Map.of()
        );

        ColumnMetaData summaryCol = new ColumnMetaData(
                "summary",
                "Summary",
                Domain.TEXT,
                Map.of()
        );

        return List.of(idCol, summaryCol, createdAtCol, updatedAtCol);
    }


}
