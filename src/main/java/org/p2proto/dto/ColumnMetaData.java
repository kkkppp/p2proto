package org.p2proto.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import org.p2proto.model.record.FieldType;
import org.p2proto.model.record.FormField;

import java.util.Map;
import java.util.UUID;

@Data
@AllArgsConstructor
public class ColumnMetaData {
    private UUID id;
    private final String name;        // Column name
    private final String label;       // Column label
    private final org.p2proto.domain.DomainType domain;  // Data type
    private final Boolean primaryKey;
    private final Boolean removable;
    private final ColumnDefaultHolder defaultValue;
    private final Map<String, String> additionalProperties; // Additional properties

    public ColumnMetaData(String name, String label, org.p2proto.domain.DomainType dataType, ColumnDefaultHolder defaultValue, Map<String, String> additionalProperties) {
        this(null, name, label, dataType, false, false, defaultValue, additionalProperties);
    }

    /**
     * Utility method to generate FormField representation.
     */
    public FormField toFormField() {
        FormField formField = new FormField();
        formField.setName(name);
        formField.setLabel(label);
        formField.setType(mapDataTypeToFieldType(domain));
        formField.setAutoGenerated(domain.isAutoIncrement());
        formField.setRequired(false); // Default value, can be customized based on additional properties
        return formField;
    }

    private FieldType mapDataTypeToFieldType(org.p2proto.domain.DomainType domain) {
        String name = domain.getInternalName();
        return switch (name) {
            case "TEXT" -> FieldType.TEXT;
            case "DATE" -> FieldType.DATE;
            case "DATETIME" -> FieldType.DATETIME;
            case "UUID", "INTEGER", "AUTOINCREMENT" -> FieldType.NUMBER;
            case "BOOLEAN" -> FieldType.CHECKBOX;
            case "PASSWORD" -> FieldType.PASSWORD;
            default -> throw new IllegalArgumentException("Unsupported data type: " + name);
        };
    }

    /**
     * Generates the part of the SELECT clause for this column.
     */
    public String generateSelectPart() {
        return domain.selectPredicate(name);
    }

    /**
     * Generates the part of the WHERE clause for this column using a placeholder.
     *
     * @return The WHERE clause part with a placeholder.
     */
    public String generateWherePart() {
        return domain.wherePredicate(name);
    }
}
